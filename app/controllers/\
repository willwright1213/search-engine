require 'matrix'
class PopularsController < ApplicationController

  def index
    # retrieve top 10 most populars
    links = Link.select("link_to").group(:link_to).order('count(link_to) desc').limit(10).count

    @json = []

    links.each do |link|
      page = Page.find(link[0])
      host = page.host
      @json.push({:id => page.id, :page => URI.join(host.name, page.name).to_s, :count => link[1]})
    end
    render json: @json
  end

  def show
    links = Link.select(:page_id).where(link_to: params['id'].to_i)

    @pages = []

    links.each do |link|
      page = Page.find(link.page_id)
      host = page.host
      @pages.push(URI.join(host.name, page.name).to_s)
    end
    page = Page.find(params[:id])
    host = page.host
    render json: {:ingoing => URI.join(host.name, page.name).to_s, :pages => @pages}
  end

  def query
    scores = Hash.new
    n = Page.count
    document_vectors = Hash.new
    queries = params[:q].split
    query_vector = Vector.zero(queries.size)
    queries.each_index do |i|
      word = Word.find_by(params[:query])
      indices = Index.where(word_id: word.id)
      idf = Math.log(n.to_f/indices.count, 10)
      query_vector[i] = idf
      indices.each do |index|
        tf = index.frequency
        wtd = Math.log(1 + tf, 10) * idf
        if document_vectors.include?(index.page_id)
          document_vectors[index.page_id][i] = wtd
        else
          v = Vector.zero(queries.size)
          v[i] = wtd
          document_vectors[index.page_id] = v
        end
      end
    end
    document_vectors.each do |page_id, vector|
      
      scores[page_id] = query_vector.inner_product(vector)
    end
  end

end
